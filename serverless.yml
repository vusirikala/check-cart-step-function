service: check-inventory-step-function
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

plugins: 
  - serverless-step-functions
  - serverless-iam-roles-per-function

stepFunctions:
  stateMachines:
    storeCheckoutFlow:
      name: storeCheckoutFlow
      definition:
        StartAt: checkInventory
        States: 
          
          checkInventory:
            Type: Task
            Resource: {"Fn::GetAtt": ["checkInventory", "Arn"]}
            Catch: 
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
            ResultPath: "$.book"          #The entire input object is represented by $. We are adding a new attribute called "book"
            Next: calculateTotal

          calculateTotal: 
            Type: Task
            Resource: {"Fn::GetAtt": ["calculateTotal", "Arn"]}
            Next: isRedeemNeeded
            ResultPath: "$.total"        #The entire input object is represented by $. We are adding a new attribute called "book"
          
          isRedeemNeeded: 
            Type: Choice
            Choices: 
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer

          RedeemPoints: 
            Type: Task
            Resource: {"Fn::GetAtt": ["redeemPoints", "Arn"]}
            Catch: 
              - ErrorEquals: [States.ALL]
                Next: RedeemPointsError
            ResultPath: "$.total"           #The previous "total" in the state will be replaced by the new one. The new "total" has redeem points as well. 
            Next: BillCustomer

          BillCustomer: 
            Type: Task
            Resource: {"Fn::GetAtt": ["billCustomer", "Arn"]}
            ResultPath: "$.billingStatus"
            Retry: 
              - ErrorEquals: [States.ALL]   #If any error occurs, retry up to 3 times before going to the Catch block. 
                MaxAttempts: 3
            Catch:
              - ErrorEquals: [States.ALL]
                ResultPath: "$.customerBilling" #The exception will be added to this variable of the state.
                Next: BillingError 
            Next: PrepareOrder

          PrepareOrder: 
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken     #The step function will send message to the SQS queue. 
            Parameters:
              QueueUrl: {"Fn::GetAtt" : [ "Queue", "QueueUrl" ]}
              MessageBody: 
                Input.$: "$"  #$ represents the entire message object
                Token.$: "$$.Task.Token"  #$$ represents context object of the state machine
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder

          DispatchOrder: 
            Type: Task
            Resource: arn:aws:states:::sns:publish 
            Parameters:
              TopicArn: {"Fn::GetAtt" : [ "SNSDispatchTopic", "TopicArn" ]}
              Message.$: "$"     #Passing on the entire message object. When we are passing on a dynamic object like this, we need to have ".$" in the end of the key. 
            Next: Dispatched

          Dispatched: 
            Type: Pass
            Result: "Dispatched to customer"
            End: true

          RefundCustomer: 
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity
          
          RestoreQuantity:
            Type: Task
            Resource: {"Fn::GetAtt": ["restoreQuantity", "Arn"]}
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints

          BookNotFoundError:
            Type: Pass
            Result: "No such book avaialable"
            End: true

          BookOutOfStockError:
            Type: Pass
            Result: "Sorry, the book is out of stock"
            End: true

          RedeemPointsError:
            Type: Pass
            Result: "Sorry, unable to redeem points"
            End: true
          
          BillingError:
            Type: Pass
            Result: "Billing Error"
            ResultPath: "$.billingStatus"   #Adding a new variable because we don't want the result to replace other information. 
            Next: RestoreRedeemPoints   #If there is a billing error, restore redeem points
          
          RestoreRedeemPoints: 
            Type: Task
            Resource: {"Fn::GetAtt": ["restoreRedeemPoints", "Arn"]}
            End: true 
          
functions:
  checkInventory:
    handler: functions/checkInventory.handler
    iamRoleStatements:
      - Effect: Allow
        Resource: {"Fn::GetAtt": ["BooksTable", "Arn"]}
        Action: "dynamodb:*"

  calculateTotal:
    handler: functions/calculateTotal.handler

  redeemPoints:
    handler: functions/redeemPoints.handler
    iamRoleStatements:
      - Effect: Allow
        Resource: {"Fn::GetAtt": ["UsersTable", "Arn"]}
        Action: "dynamodb:*"

  billCustomer:
    handler: functions/billCustomer.handler

  prepareOrder: 
    handler: functions/prepareOrder.handler

  restoreRedeemPoints:
    handler: functions/restoreRedeemPoints.handler

  sqsWorker:      #Picks messages from SQS queue and process them. 
    handler: functions/sqsWorker.handler
    events:
      - sqs: 
          arn: {"Fn::GetAtt" : [ "Queue", "Arn" ]}
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Resource: {"Fn::GetAtt": ["BooksTable", "Arn"]}
        Action: "dynamodb:*"
      - Effect: Allow
        Resource: ${self:resources.Outputs.storeCheckoutFlow.Value}  #{"Fn::GetAtt": ["storeCheckoutFlow", "Arn"]}
        Action: 
          - "states:SendTaskSuccess"
      - Effect: Allow
        Resource: ${self:resources.Outputs.storeCheckoutFlow.Value}  #{"Fn::GetAtt": ["storeCheckoutFlow", "Arn"]}  
        Action: 
          - "states:SendTaskFailure"

  restoreQuantity: 
    handler: functions/restoreQuantity.handler
    iamRoleStatements:
      - Effect: Allow
        Resource: {"Fn::GetAtt": ["UsersTable", "Arn"]}
        Action: "dynamodb:*"


# you can add CloudFormation resource templates here
resources:
  Resources:

    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bookTable
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST


    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MESSAGE_QUEUE

    QueuePolicy:                        # IAM Resource policy for the event bridge to send messages to the queue
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues: 
          - { Ref: 'Queue' }
        PolicyDocument: 
          Statement: 
            - Action: "SQS:SendMessage"
              Effect: "Allow"
              Resource: {"Fn::GetAtt" : [ "Queue", "Arn" ]}
              Principal:                  # Principal is required for the resource-based IAM policies. What are the entitites that are allowed to use this permission? The principal could be any AWS service, IAM user, AWS account, another AWS account, etc. 
                Service: states.${self:provider.region}.amazonaws.com   #Principal for step function

    SNSDispatchTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: DispatchProduct

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties: 
        TopicArn: { "Ref" : "SNSDispatchTopic" } 
        Protocol: "email"
        Endpoint: "satyasatya123456@gmail.com"
    
    SNSDispatchTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties: 
        PolicyDocument:
          Id: SNSDispatchTopicPolicyId
          Version: '2012-10-17'
          Statement:
            - Sid: SNSDispatchTopicStatementId
              Effect: Allow
              Action: sns:Publish
              Resource: { "Ref" : "SNSDispatchTopic" } 
              Principal:
                Service: states.${self:provider.region}.amazonaws.com
        Topics: 
          - { "Ref" : "SNSDispatchTopic" } 
  
  
  Outputs:
    storeCheckoutFlow:
      Description: The ARN of the checkout flow state machine
      Value:
        Ref: StoreCheckoutFlow
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
